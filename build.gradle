/*
 * Copyright (c) 2016-2019, Leftshift One
 * __________________
 * [2019] Leftshift One
 * All Rights Reserved.
 * NOTICE:  All information contained herein is, and remains
 * the property of Leftshift One and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Leftshift One
 * and its suppliers and may be covered by Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Leftshift One.
 */

buildscript {
    ext {
        kotlinVersion = "1.3.41"
        mockkVersion = "1.9.3"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "one.leftshift.asteria:asteria-dependency:latest.release"
        classpath "one.leftshift.asteria:asteria-email:latest.release"
        classpath "one.leftshift.asteria:asteria-publish:latest.release"
        classpath "one.leftshift.asteria:asteria-version:latest.release"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

apply plugin: "kotlin"
apply plugin: "java"
apply plugin: "com.jfrog.bintray"
apply plugin: "one.leftshift.asteria-email"
apply plugin: "one.leftshift.asteria-publish"
apply plugin: "one.leftshift.asteria-dependency"
apply plugin: "one.leftshift.asteria-version"

asteriaEmail {
    smtpHost = System.getenv("ASTERIA_EMAIL_SMTP_HOST")
    smptUser = System.getenv("ASTERIA_EMAIL_SMTP_USER")
    smptPassword = System.getenv("ASTERIA_EMAIL_SMTP_PASSWORD")
    sender = System.getenv("ASTERIA_EMAIL_SENDER")
}


asteriaDependency {
    enableBranchSnapshotRepositories = true
}


repositories {
    jcenter()
    maven {
        credentials(AwsCredentials) {
            accessKey gradle.awsAccessKey
            secretKey gradle.awsSecretKey
        }
        url gradle.releasesRepositoryUrl
    }
    maven {
        credentials(AwsCredentials) {
            accessKey gradle.awsAccessKey
            secretKey gradle.awsSecretKey
        }
        url gradle.snapshotsRepositoryUrl
    }
}

afterEvaluate { project.tasks.sendReleaseEmail.mustRunAfter project.tasks.postRelease }

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=compatibility"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=compatibility"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    testImplementation "org.assertj:assertj-core:3.16.1"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testImplementation "io.reactivex.rxjava2:rxjava:2.2.19"
    testImplementation "one.leftshift.dynabuffers:dynabuffers:0.19.0"
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) { testTask ->
    minHeapSize = "1G"
    maxHeapSize = "2G"
    testTask.beforeTest { descriptor ->
        logger.lifecycle(descriptor.toString())
    }
    testTask.afterTest { descriptor, result ->
        println "\n$descriptor.className [$descriptor.classDisplayName] > $descriptor.name [$descriptor.displayName]: $result.resultType"
    }
}


asteriaPublish {
    enableBranchSnapshotRepositories = true
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            artifact sourceJar
            pom.withXml {
                Node root = asNode()
                root.appendNode("name", "SKILL CONTRACTS")
                root.appendNode("description", "SKILL CONTRACTS is an open source library that contains multiple contracts compatible with GAIA Skills.")
                root.appendNode("url", "https://github.com/leftshiftone/skill-contracts")

                Node licenses = root.appendNode("licenses")
                Node license = licenses.appendNode("license")
                license.appendNode("name", "Apache License 2.0")
                license.appendNode("url", "https://github.com/leftshiftone/skill-contracts/blob/master/LICENSE")

                Node developers = root.appendNode("developers")
                Node developer = developers.appendNode("developer")
                developer.appendNode("id", "leftshiftone")
                developer.appendNode("name", "Leftshift One")
                developer.appendNode("email", "contact@leftshift.one")
                developer.appendNode("organization", "Leftshift One Software GmbH")
                developer.appendNode("organizationUrl", "https://www.leftshift.one")

                Node scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/skill-contracts.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/skill-contracts.git")
                scm.appendNode("url", "https://github.com/leftshiftone/skill-contracts")
            }
        }
    }
}

bintray {
    logger.info "Bintray deploy with user [${System.getenv('BINTRAY_USER')}] while working on ${project.name}"
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    override = true
    pkg {
        repo = "skill-contracts"
        name = "${project.group}.${project.name}"
        userOrg = "leftshiftone"
        licenses = ["Apache License 2.0"]
        vcsUrl = "https://github.com/leftshiftone/skill-contracts.git"
        publications = ["mavenJava"]
    }
}

if (System.getenv("CI")) {
    publish.finalizedBy bintrayUpload
}

if (System.getenv("CI") == null || System.getenv("CI") != "true") {
    tasks.release.dependsOn tasks.generateLock
    tasks.release.dependsOn tasks.saveLock
    tasks.release.dependsOn tasks.persistDependencyLock
}
